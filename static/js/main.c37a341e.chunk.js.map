{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","dbUrl","this","props","movie","id","window","location","href","key","className","src","poster_src","alt","width","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","searchTerm","urlString","$","ajax","url","success","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","console","event","target","performSearch","data-toggle","data-target","placeholder","onChange","searchChangeHandler","aria-label","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAuBeA,G,0LAlBX,IAAMC,EAAQ,oCAAsCC,KAAKC,MAAMC,MAAMC,GACrEC,OAAOC,SAASC,KAAOP,I,+BAIvB,OACE,yBAAKQ,IAAKP,KAAKC,MAAMC,MAAMC,GAAIK,UAAU,8BACvC,yBAAKA,UAAU,oBAAoBC,IAAKT,KAAKC,MAAMC,MAAMQ,WAAYC,IAAI,SAASC,MAAM,UACxF,yBAAKJ,UAAU,aACb,wBAAIA,UAAU,cAAcR,KAAKC,MAAMC,MAAMW,OAC7C,uBAAGL,UAAU,aAAaR,KAAKC,MAAMC,MAAMY,UAC3C,2BAAOC,KAAK,SAASC,QAAShB,KAAKiB,UAAUC,KAAKlB,MAAOmB,MAAM,OAAOX,UAAU,0B,GAdnEY,IAAMC,Y,gBC8EdC,E,YA1Eb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQ,GAFI,E,2EAOHC,GAAa,IAAD,OAClBC,EAAY,2GAA6GD,EAAa,8BAC5IE,IAAEC,KAAK,CACHC,IAAKH,EACLI,QAAS,SAACC,GACN,IAAMC,EAAUD,EAAcC,QAE1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAAC/B,GACfA,EAAMQ,WAAa,kCAAoCR,EAAMgC,YAC7D,IAAMC,EAAW,kBAAC,EAAD,CAAU5B,IAAKL,EAAMC,GAAID,MAAQA,IAClD8B,EAAUI,KAAKD,MAEjB,EAAKE,SAAS,CAACC,KAAMN,KAEzBO,MAAO,SAACC,EAAKC,EAAQC,GACjBC,QAAQJ,MAAM,yB,0CAKJK,GAClB,IACMpB,EAAaoB,EAAMC,OAAO1B,MADZnB,KAER8C,cAActB,K,+BAI1B,OACE,6BAEE,yBAAKhB,UAAU,+CACb,uBAAGA,UAAU,eAAeF,KAAK,cAAjC,gBACA,4BAAQE,UAAU,iBAAiBO,KAAK,SAASgC,cAAY,WAAWC,cAAY,sBAClF,0BAAMxC,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BL,GAAG,qBAC3C,wBAAIK,UAAU,cACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWF,KAAK,cAA7B,SAEF,wBAAIE,UAAU,YACZ,uBAAGA,UAAU,WAAWF,KAAK,cAA7B,aAOR,0BAAME,UAAU,eACd,2BAAOA,UAAU,oDAAoDO,KAAK,OAAOkC,YAAY,SAC7FC,SAAUlD,KAAKmD,oBAAoBjC,KAAKlB,MAAOoD,aAAW,YAI5D,yBAAK5C,UAAU,aACb,yBAAKA,UAAU,OACZR,KAAKuB,MAAMe,Y,GAlERjB,aCOEgC,QACW,cAA7BjD,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c37a341e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MovieRow extends React.Component {\r\n\r\n  viewMovie() {\r\n    const dbUrl = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n    window.location.href = dbUrl\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div key={this.props.movie.id} className=\"card mx-auto col-sm-9 mt-3\">\r\n        <img className=\"card-img-top pt-3\" src={this.props.movie.poster_src} alt=\"Poster\" width=\"500px\" />\r\n        <div className=\"card-body\">\r\n          <h4 className=\"card-title\">{this.props.movie.title}</h4>\r\n          <p className=\"card-text\">{this.props.movie.overview}</p>\r\n          <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\" className=\"btn btn-primary\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieRow\r\n","import React, { Component } from 'react';\nimport './App.css'\nimport MovieRow from './MovieRow.js';\nimport $ from 'jquery';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\r\n    this.state = {}\n\n    //this.performSearch(\"happy feet\")\n  }\n\n    performSearch(searchTerm) {\r\n      const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=7162c15f962743f2f6511216d4ede954&language=en-US&query=\" + searchTerm + \"&page=1&include_adult=false\";\r\n      $.ajax({\r\n          url: urlString,\r\n          success: (searchResults) => {\r\n              const results = searchResults.results\r\n\r\n              var movieRows = []\r\n\r\n              results.forEach((movie) => {\r\n                movie.poster_src = \"https://image.tmdb.org/t/p/w500\" + movie.poster_path\r\n                const movieRow = <MovieRow key={movie.id} movie= {movie} />\r\n                movieRows.push(movieRow)\r\n              })\r\n              this.setState({rows: movieRows})\r\n          },\r\n          error: (xhr, status, err) => {\r\n              console.error(\"Failed to fetch.\")\r\n          }\r\n      })\r\n    }\n\n    searchChangeHandler(event) {\n      const boundObject = this\n      const searchTerm = event.target.value\n      boundObject.performSearch(searchTerm)\n    }\n\n    render() {\n      return (\n        <div>\n          {/* NavBar */}\n          <nav className=\"navbar navbar-expand-md bg-dark navbar-dark\">\n            <a className=\"navbar-brand\" href=\"index.html\">React Movies</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"index.html\">Home</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"about.html\">About</a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n\n          {/* Search form */}\n          <form className=\"form-inline\">\n            <input className=\"form-control form-control-sm ml-2 mr-2 mt-2 w-100\" type=\"text\" placeholder=\"Search\"\n            onChange={this.searchChangeHandler.bind(this)} aria-label=\"Search\" />\n          </form>\n\n          {/* Movie Rows */}\n          <div className=\"container\">\n            <div className=\"row\">\n              {this.state.rows}\n            </div>\n          </div>\n\n        </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}